<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Email Harvester • Results for <%= domain %></title>
  <!-- Local Bootstrap CSS -->
  <link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Google Font -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
    rel="stylesheet"
  />
  <style>
    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    body {
      display: flex;
      flex-direction: column;
      font-family: 'Roboto', sans-serif;
      background-color: #f1f3f5;
    }
    .hero-results {
      background: linear-gradient(135deg, #4f46e5 0%, #3b82f6 100%);
      color: #ffffff;
      padding: 4rem 0;
      text-align: center;
    }
    .hero-results h1 {
      font-weight: 700;
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
    }
    .hero-results p {
      font-weight: 300;
      font-size: 1.1rem;
    }
    main {
      flex: 1;
    }
    /* Scrollable box for email lists */
    .email-box {
      max-height: 400px;      /* Adjust height as needed */
      overflow-y: auto;
      background-color: #ffffff;
      border: 1px solid #dee2e6;
      border-radius: 0.5rem;
      padding: 1rem;
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.05);
      margin-bottom: 1.5rem;
    }
    /* Card styling inside the scrollable boxes */
    #secureEmailList .card,
    #predictedEmailList .card {
      border-radius: 0.75rem;
      box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.05);
      margin-bottom: 0.75rem;
    }
    #loadingSpinner {
      display: none;
    }
    footer {
      background-color: #343a40;
      color: #ced4da;
      text-align: center;
      padding: 1.5rem 0;
    }
    footer a {
      color: #adb5bd;
      text-decoration: none;
    }
    footer a:hover {
      color: #ffffff;
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-sm">
    <div class="container">
      <a class="navbar-brand fw-bold" href="/">EmailHarvester</a>
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarNav"
        aria-controls="navbarNav"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item">
            <a class="nav-link" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/#how-it-works">How It Works</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/#about">About</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Hero Results Section -->
  <section class="hero-results">
    <div class="container">
      <h1>Results for "<%= domain %>"</h1>
      <p class="fw-light">Fetching public email addresses…</p>
      <a href="/" class="btn btn-light btn-lg mt-3 shadow-sm">Search Again</a>
      <button id="downloadBtn" class="btn btn-light btn-lg mt-3 ms-2 shadow-sm">
        Download JSON
      </button>
    </div>
  </section>

  <!-- Results List -->
  <main class="container py-5">
    <!-- Secure Emails Box -->
    <h5 class="mb-2">Secure Emails</h5>
    <div class="email-box">
      <div id="secureEmailList">
        <!-- Secure email cards will be appended here -->
      </div>
    </div>

    <!-- predicted Emails Box -->
    <h5 class="mb-2">Predicted Emails</h5>
    <div class="email-box">
      <div id="predictedEmailList">
        <!-- predicted email cards will be appended here -->
      </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="text-center mt-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Still scanning…</p>
    </div>
  </main>

  <!-- Footer -->
  <footer>
    <div class="container">
      <p class="mb-1">&copy; 2025 EmailHarvester. All Rights Reserved.</p>
      <p>
        Built with <a href="https://getbootstrap.com/">Bootstrap 5</a>.
      </p>
    </div>
  </footer>

  <!-- Local Bootstrap JS & Dependencies -->
  <script src="/bootstrap/js/bootstrap.bundle.min.js"></script>
  <!-- Bootstrap Icons -->
  <link
    rel="stylesheet"
    href="/bootstrap-icons/font/bootstrap-icons.css"
  />

  <!-- Client-Side Script remains unchanged -->
  <script>
    let id; // Unique ID for the current scan
    const domain = "<%= domain %>"; // Domain being scanned
    const company = "<%= company %>"; // Company name for the scan
    const Storage = window.localStorage;
    const DEBUG = <%= debug %>; // Debug mode flag

    if (DEBUG) Storage.clear();

    let continue_fetch = true;

    window.addEventListener('load', async () => {
      // Show the loading spinner immediately
      document.getElementById('loadingSpinner').style.display = 'block';

      const saved_domain = Storage.getItem('domain');
      // if the user just refreshed the page, it should not fetch a new id
      if (!saved_domain || saved_domain !== domain) {
        // fetch the id
        id = (await (await fetch('/api/search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ domain, company })
        })).json()).id;
        if (!id) {
          console.error('Failed to fetch scan ID');
          return;
        }
      }

      // Localstorage setup
      const saved_id = Storage.getItem('id');
      if (!saved_id || (id !== undefined && saved_id !== id)) {
        // If there is no id yet or a different scan ID is stored, clear the storage and initialize it
        Storage.clear();
        Storage.setItem('id', id);
        Storage.setItem('domain', domain);
        Storage.setItem('emails', JSON.stringify([]));
      } else {
        // If the same ID is stored, keep the existing emails (this prevents loss of data on page reload)
        id = saved_id;
        const existingEmails = Storage.getItem('emails');
        if (existingEmails) {
          const emails = JSON.parse(existingEmails);
          emails.forEach(item => addEmail(item.email, item.type));
        }
      }

      setTimeout(fetch_emails, 2500);
    });

    /**
     * This function fetches emails asynchronously from the server.
     * It starts fetching emails every 2 seconds until the server indicates no more emails are available or an error occurs.
     */
    async function fetch_emails() {
      try {
        const response = await fetch(`/api/fetch?id=${id}`);
        if (response.status !== 200 && response.status !== 418) {
          continue_fetch = false;
          throw new Error('Network response was not ok');
        }

        if (response.status === 418) {
          continue_fetch = false; // Stop fetching if the server indicates no more emails
        }

        const data = await response.json();
        // update only if there are new emails
        if (data && (data.secure.length > 0 || data.predicted.length > 0)) {
          const existingEmails = JSON.parse(Storage.getItem('emails') || '[]');
          // Add each email to the respective list and localStorage
          data.secure.forEach(email => {
            addEmail(email, 'secure');
            existingEmails.push({email, type: 'secure'});
          });

          data.predicted.forEach(email => {
            addEmail(email, 'predicted');
            existingEmails.push({email, type: 'predicted'});
          });

          // Update localStorage with the new list of emails
          Storage.setItem('emails', JSON.stringify(existingEmails));
        }
      } catch (error) {
        console.error('Error fetching emails:', error);
        continue_fetch = false;
      } finally {
        if (continue_fetch) {
          // Continue fetching emails every 2 seconds
          setTimeout(fetch_emails, 2000);
        } else {
          // Hide the spinner when done
          document.getElementById('loadingSpinner').style.display = 'none';
        }
      }
    }

    /**
     * Function to append a new email to the appropriate list.
     * @param {string} email - The email address to add
     * @param {string} type - 'secure' or 'predicted'
     */
    function addEmail(email, type) {
      const listId = type === 'secure' ? 'secureEmailList' : 'predictedEmailList';
      const listContainer = document.getElementById(listId);
      const card = document.createElement('div');
      card.className = 'card';
      card.innerHTML = `
        <div class="card-body d-flex justify-content-between align-items-center">
          <span class="fw-medium">${email}</span>
          <a href="mailto:${email}" class="btn btn-outline-secondary btn-sm">
            <i class="bi bi-envelope-fill me-1"></i>Email
          </a>
        </div>
      `;
      listContainer.appendChild(card);
    }

    // Download JSON button handler
    document.getElementById('downloadBtn').addEventListener('click', () => {
      const allEmails = Storage.getItem('emails') || '[]';
      const blob = new Blob([allEmails], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${domain}_emails.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
  </script>
</body>
</html>
